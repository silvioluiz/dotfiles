#!/usr/bin/env bash
set -euo pipefail

echo "===== üöÄ Checklist de ferramentas instaladas ====="

# --- Bootstrap m√≠nimo do Homebrew (apenas se necess√°rio no macOS) ---
if [[ "${OSTYPE:-}" == darwin* ]]; then
  if command -v brew >/dev/null 2>&1; then
    # S√≥ injeta shellenv se o prefixo do brew n√£o estiver no PATH atual
    if hb_prefix="$(brew --prefix 2>/dev/null)"; then
      if [[ ":$PATH:" != *":$hb_prefix/bin:"* ]]; then
        eval "$(/usr/bin/env brew shellenv)"
        echo "[i] Homebrew shellenv aplicado (prefix: $hb_prefix)."
      fi
    fi
  fi
fi

# --- Checagem do Zsh ---
echo
echo "[Zsh] Verificando shell padr√£o e vers√µes..."

user_shell="$(getent passwd "$(whoami)" | cut -d: -f7 || true)"
if [[ -z "$user_shell" && "$OSTYPE" == darwin* ]]; then
  # macOS n√£o tem getent, usa dscl
  user_shell="$(dscl . -read ~/ UserShell 2>/dev/null | awk '{print $2}')"
fi

if [[ "$user_shell" == *"zsh" ]]; then
  echo "‚úÖ Shell padr√£o √© Zsh ($user_shell)"
else
  echo "‚ùå Shell padr√£o n√£o √© Zsh (atual: $user_shell)"
fi

if command -v zsh >/dev/null 2>&1; then
  echo "‚ÑπÔ∏è  Vers√£o do Zsh: $(zsh --version)"
else
  echo "‚ùå Zsh n√£o encontrado no PATH"
fi

if [[ -d "$HOME/.oh-my-zsh" ]]; then
  echo "‚úÖ Oh My Zsh instalado em ~/.oh-my-zsh"
  if command -v git >/dev/null 2>&1; then
    if ver="$(git -C "$HOME/.oh-my-zsh" describe --tags 2>/dev/null)"; then
      echo "‚ÑπÔ∏è  Vers√£o/tag do Oh My Zsh: $ver"
    else
      sha="$(git -C "$HOME/.oh-my-zsh" rev-parse --short HEAD 2>/dev/null || true)"
      [[ -n "$sha" ]] && echo "‚ÑπÔ∏è  Commit do Oh My Zsh: $sha"
    fi
  fi
else
  echo "‚ùå Oh My Zsh n√£o encontrado em ~/.oh-my-zsh"
fi

# --- Lista essencial de ferramentas a validar ---
COMMON_TOOLS=(
  atuin bat btop curlie dust eza fd fzf ghostty htop hurl k9s lazydocker lazygit
  navi nu rg shellcheck starship yazi zoxide neovim lvim
)

get_friendly_name() {
  case "$1" in
    nu) echo "nushell" ;;
    rg) echo "ripgrep" ;;
    neovim) echo "nvim" ;;
    lvim) echo "LunarVim" ;;
    *) echo "$1" ;;
  esac
}

DEFAULT_CANDIDATES=( "--version" "-V" "version" "version --short" )

try_version() {
  local tool="$1" out="" custom="" candidates=()
  case "$tool" in
    fzf) custom="-v" ;;
    k9s) custom="version --short" ;;
    neovim) tool="nvim" ;;   # comando real
  esac
  [[ -n "$custom" ]] && candidates+=("$custom")
  candidates+=("${DEFAULT_CANDIDATES[@]}")

  for cand in "${candidates[@]}"; do
    read -r -a args <<<"$cand"
    if out="$("$tool" "${args[@]}" 2>&1)"; then
      echo "$out" | head -n1
      return 0
    fi
  done
  return 1
}

echo
echo "[1/3] Validando bin√°rios..."
for tool in "${COMMON_TOOLS[@]}"; do
  friendly="$(get_friendly_name "$tool")"
  case "$tool" in
    neovim) cmd="nvim" ;;
    *) cmd="$tool" ;;
  esac

  if command -v "$cmd" >/dev/null 2>&1; then
    if ver="$(try_version "$tool")"; then
      printf "‚úÖ %-12s ‚Äî %s\n" "$friendly" "$ver"
    else
      printf "‚úÖ %-12s ‚Äî instalado\n" "$friendly"
    fi
  else
    printf "‚ùå %-12s ‚Äî n√£o encontrado\n" "$friendly"
  fi
done

echo
echo "[2/3] PATH atual (cada entrada em uma linha):"
echo "$PATH" | tr ':' '\n'

echo
echo "[3/3] Ambiente:"
printf "SO: "
if [[ "${OSTYPE:-}" == darwin* ]]; then
  printf "macOS\n"
else
  printf "Linux/Unix\n"
fi

echo
echo "===== ‚úÖ Checklist conclu√≠do ====="
