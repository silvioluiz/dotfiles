#!/usr/bin/env bash
set -euo pipefail
# O helper do macOS não é mais necessário aqui, pois o script principal agora roda dentro do zsh
# {{ include "init_macos_env" | indent 0 }} 

echo "===== 🚀 Iniciando checklist dentro de um shell Zsh interativo ====="

# Executa todo o checklist dentro de um 'zsh' interativo (-i)
# Isso garante que ~/.zshrc seja carregado, ativando mise, zoxide, etc.
# Usamos um HEREDOC (<<'EOF') para passar o script de forma segura.
zsh -i -c <<'EOF'

# Nota: Dentro deste bloco, estamos em um shell Zsh.

# 1. Shell e prompt
echo "[1/8] Testando shell e prompt..."
if [[ "$SHELL" == *"zsh" ]]; then
  echo "✅ Shell padrão é Zsh"
else
  echo "❌ Shell padrão não é Zsh"
fi

# ... (o resto do script que refatoramos antes, com as funções e case statements,
#      pode ser colado aqui dentro. A lógica interna dele já está correta) ...

# Cole aqui a seção 6 inteira que corrigimos anteriormente
# 6. Utilitários comuns
echo "[6/8] Testando utilitários comuns..."
COMMON_TOOLS=(atuin bat btop curlie dust eza fd fzf ghostty htop hurl k9s lazydocker lazygit navi nu rg shellcheck starship yazi zoxide)

get_friendly_name() {
  case "$1" in
    nu) echo "nushell" ;;
    rg) echo "ripgrep" ;;
     *) echo "$1" ;;
  esac
}

DEFAULT_CANDIDATES=( "--version" "-V" "version" "version --short" )

try_version() {
  local tool="$1"; local out=""; local -a candidates=(); local custom_candidate=""
  case "$tool" in
    fzf) custom_candidate="-v" ;;
    k9s) custom_candidate="version --short" ;;
  esac
  if [[ -n "$custom_candidate" ]]; then candidates+=("$custom_candidate"); fi
  candidates+=("${DEFAULT_CANDIDATES[@]}")
  for cand in "${candidates[@]}"; do
    local args=( $cand )
    if out="$("$tool" "${args[@]}" 2>&1)"; then
      echo "$out" | head -n1; return 0;
    fi
  done
  return 1
}

for tool in "${COMMON_TOOLS[@]}"; do
  friendly_name="$(get_friendly_name "$tool")"
  if command -v "$tool" >/dev/null 2>&1; then
    if ver="$(try_version "$tool")"; then
      printf "✅ %s instalado — %s\n" "$friendly_name" "$ver"
    else
      printf "✅ %s instalado\n" "$friendly_name"
    fi
  else
    printf "❌ %s não encontrado\n" "$friendly_name"
  fi
done

# (E as outras seções do seu checklist...)

echo "[7/8] Validando PATH..."
echo "$PATH" | tr ':' '\n'

echo "[8/8] Checklist concluído!"

EOF

echo "===== ✅ Fim ====="