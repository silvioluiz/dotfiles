#!/bin/bash
set -e

VM_NAME="chezmoi-test"
UBUNTU_VERSION="24.04"
GITHUB_USER="${GITHUB_USER:-silvioluiz}" # padr√£o silvioluiz
CLEANUP=false

# Parse argumentos
for arg in "$@"; do
  case $arg in
    --clean)
      CLEANUP=true
      shift
      ;;
    *)
      ;;
  esac
done

echo "üöÄ Criando VM Multipass: $VM_NAME ($UBUNTU_VERSION)..."
multipass launch "$UBUNTU_VERSION" --name "$VM_NAME" --disk 20G --memory 3G

echo "‚è≥ Aguardando VM iniciar..."
sleep 5

echo "üì¶ Instalando chezmoi na VM..."
multipass exec "$VM_NAME" -- sudo cloud-init status --wait
multipass exec "$VM_NAME" -- sudo apt update
multipass exec "$VM_NAME" -- sudo apt install -y curl git zsh ca-certificates
multipass exec "$VM_NAME" -- bash -lc 'curl -fsLS get.chezmoi.io | sh -s -- -b "$HOME/.local/bin"'

echo "üì• Clonando e aplicando reposit√≥rio chezmoi de $GITHUB_USER..."
multipass exec "$VM_NAME" -- bash -lc "export PATH=\"\$HOME/.local/bin:\$PATH\"; chezmoi --version"
multipass exec "$VM_NAME" -- bash -lc "export PATH=\"\$HOME/.local/bin:\$PATH\"; chezmoi init --apply \"$GITHUB_USER\""

echo "üß™ Criando script de checklist na VM..."
multipass exec "$VM_NAME" -- bash -c "cat <<'EOF' > /tmp/chezmoi_test_checklist.sh
#!/bin/bash
set -e
export PATH="$HOME/.local/bin:$PATH"
echo '===== üöÄ Iniciando checklist do ambiente chezmoi ====='

# 1. Shell
[[ \"\$SHELL\" == *\"zsh\"* ]] && echo '‚úÖ Shell padr√£o √© Zsh' || echo '‚ùå Shell padr√£o n√£o √© Zsh'
command -v starship >/dev/null && echo '‚úÖ Starship: ' \$(starship --version) || echo '‚ùå Starship n√£o encontrado'

# 2. Plugins
[[ -n \"\$(typeset -f _fzf_tab_completion 2>/dev/null)\" ]] && echo '‚úÖ fzf-tab' || echo '‚ö†Ô∏è fzf-tab n√£o detectado'
[[ -n \"\$ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE\" ]] && echo '‚úÖ zsh-autosuggestions' || echo '‚ö†Ô∏è zsh-autosuggestions n√£o detectado'
command -v zoxide >/dev/null && echo '‚úÖ zoxide' || echo '‚ùå zoxide n√£o encontrado'

# 3. mise
if command -v mise >/dev/null 2>&1; then
  echo "‚úÖ mise: $(mise --version | head -n1)"

  for tool in node python go; do
    # h√° algo instalado/configurado para esse tool?
    if out="$(mise ls "$tool" 2>/dev/null)" && [[ -n "$out" ]]; then
      # tenta mostrar a vers√£o do bin√°rio ativo no PATH
      case "$tool" in
        node)   bin=node ;;
        python) bin=python3 ;;  # costuma ser python3
        go)     bin=go ;;
      esac

      if command -v "$bin" >/dev/null 2>&1; then
        ver="$("$bin" --version 2>/dev/null | head -n1)"
        echo "‚úÖ $tool no mise ‚Äî ${ver:-instalado}"
      else
        echo "‚ö†Ô∏è  $tool listado no mise, mas bin√°rio n√£o est√° no PATH (ative o shell e rode 'mise install')."
      fi
    else
      echo "‚ùå $tool n√£o encontrado no mise"
    fi
  done
else
  echo "‚ùå mise n√£o encontrado"
fi

# 4. CLIs cloud
for cli in aws gh gcloud; do
  command -v \$cli >/dev/null && echo \"‚úÖ \$cli: \$($cli --version | head -n1)\" || echo \"‚ùå \$cli n√£o encontrado\"
done

# 5. Multiplexadores
for mux in tmux zellij; do
  command -v \$mux >/dev/null && echo \"‚úÖ \$mux: \$($mux -V 2>/dev/null || $mux --version)\" || echo \"‚ùå \$mux n√£o encontrado\"
done

# 6. Neovim
command -v nvim >/dev/null && echo '‚úÖ Neovim: ' \$(nvim --version | head -n1) || echo '‚ùå Neovim n√£o encontrado'

# 7. Utilit√°rios comuns
for tool in bat btop curlie dust eza fd fzf htop hurl k9s lazygit lazydocker navi nu rg shellcheck starship yazi zoxide; do
  command -v \$tool >/dev/null && echo \"‚úÖ \$tool\" || echo \"‚ùå \$tool n√£o encontrado\"
done

echo '===== ‚úÖ Fim ====='
EOF"

multipass exec "$VM_NAME" -- chmod +x /tmp/chezmoi_test_checklist.sh

echo "‚ñ∂Ô∏è Rodando checklist..."
multipass exec "$VM_NAME" -- /tmp/chezmoi_test_checklist.sh

if [ "$CLEANUP" = true ]; then
  echo "üßπ Limpando VM..."
  multipass delete "$VM_NAME"
  multipass purge
  echo "‚úÖ VM apagada."
else
  echo "üí° Para entrar na VM manualmente:"
  echo "    multipass shell $VM_NAME"
  echo "üí° Para apagar depois:"
  echo "    multipass delete $VM_NAME && multipass purge"
fi
